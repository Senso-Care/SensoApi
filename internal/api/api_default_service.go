/*
 * Senso-Care
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"github.com/Senso-Care/SensoApi/internal/data"
	"github.com/Senso-Care/SensoApi/internal/models"
	"net/http"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API. 
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	DataService *data.InfluxServicer
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(dataService *data.InfluxServicer) DefaultApiServicer {
	return &DefaultApiService{
		DataService: dataService,
	}
}

// GetMetrics - Get list of metrics types
func (s *DefaultApiService) GetMetrics(ctx context.Context, range_ string) (ImplResponse, error) {
	if len(range_) == 0 {
		return Response(http.StatusBadRequest, Response(400,  "invalid time range, example: '3d' (3 days)")), nil
	}
	res, err := (*s.DataService).GetMetrics(ctx, range_)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}
	return Response(http.StatusOK, res), nil
}

// GetMetricsFromSensor - Get data from sensor
func (s *DefaultApiService) GetMetricsFromSensor(ctx context.Context, name string, range_ string) (ImplResponse, error) {
	if len(range_) == 0 {
		return Response(http.StatusBadRequest, Response(400,  "invalid time range, example: '3d' (3 days)")), nil
	}
	res, err := (*s.DataService).GetMetricsFromSensor(ctx, name, range_)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}
	return Response(http.StatusOK, res), nil
}

// GetLastMetrics - Get last value of all sensors of a given metric
func (s *DefaultApiService) GetLastMetrics(ctx context.Context, type_ string, range_ string) (ImplResponse, error) {
	if len(range_) == 0 {
		return Response(http.StatusBadRequest, Response(400,  "invalid time range, example: '3d' (3 days)")), nil
	}
	res, err := (*s.DataService).GetLastMetrics(ctx, type_, range_)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}
	return Response(http.StatusOK, res), nil
}

// GetMetricsFromType - Get data from type
func (s *DefaultApiService) GetMetricsFromType(ctx context.Context, type_ string, range_ string) (ImplResponse, error) {
	if len(range_) == 0 {
		return Response(http.StatusBadRequest, Response(400,  "invalid time range, example: '3d' (3 days)")), nil
	}
	res, err := (*s.DataService).GetMetricsFromType(ctx, type_, range_)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}
	return Response(http.StatusOK, res), nil
}

// GetSensors - Get list of sensors
func (s *DefaultApiService) GetSensors(ctx context.Context, range_ string) (ImplResponse, error) {
	if len(range_) == 0 {
		return Response(http.StatusBadRequest, Response(400,  "invalid time range, example: '3d' (3 days)")), nil
	}
	res, err := (*s.DataService).GetSensors(ctx, range_)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}
	return Response(http.StatusOK, res), nil
}

// PostMetricsFromType - Get data from type
func (s *DefaultApiService) PostMetricsFromType(ctx context.Context, type_ string, dataPoint models.DataPoint) (ImplResponse, error) {
	if err := (*s.DataService).PostMetricsFromType(ctx, type_, dataPoint); err != nil {
		return Response(http.StatusBadRequest, nil),err
	}
	return Response(http.StatusOK, "Point inserted"), nil
}

